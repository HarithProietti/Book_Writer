### File where the actual content is written (the paragraphs)

from utils import BaseEventChain

class WriterChain(BaseEventChain):

    PROMPT = """
    You are a novel write. The novel contains a list of events, and I will provide you all events that have already happened.
    Your job is to generate the paragraphs about the new event.
    To help you, I will provide you the novel's title, its main plot, a description of the main character, and the plot of the current chapter.
    Additionally, I will provide you with the list of all paragraphs from the previous event.
    Please make sure all paragraphs are consistent with the plot of the current chapter.
    The paragraphs should be consistent with the genre of the novel, and the author's style.

    Genre: {author}
    Author's style: {author}

    Title: {title}
    Main character's profile: {profile}

    Novel's plot: {plot}

    Previous events: 
    {previous_events}

    Current chapter's summary: {summary}

    Previous paragraphs (from the previous event): 
    {previous_paragraphs}

    New event (you need to write its paragraphs):
    {current_event}

    Paragraphs of the novel describing this event:
    """

    def run(self, genre, author, title, profile, plot, previous_events, summary, previous_paragraphs, current_event):

        previous_events = '\n'.join(previous_events) # transforming list of events are a string with line breaks between each event

        return self.chain.predict(
            genre=genre,
            author=author,
            title=title,
            profile=profile,
            plot=plot,
            previous_events=previous_events,
            summary=summary,
            previous_paragraphs=previous_paragraphs,
            current_event=current_event
        )
    

def write_book(genre, author, title, profile, plot, summaries_dict, event_dict):

    writer_chain = WriterChain()
    previous_events = []
    book = {}
    paragraphs = ''  # Actual content of the book
    for chapter, event_list in event_dict.items():

        book[chapter] = []  # list of paragraphs for ongoing chapter

        for event in event_list:
            
            paragraphs = writer_chain.run(
            genre=genre,
            author=author,
            title=title,
            profile=profile,
            plot=plot,
            previous_events=previous_events,
            summary=summaries_dict[chapter],
            previous_paragraphs=paragraphs,   # paragraph generated by the chain at the previous iteration
            current_event=event
            )

        previous_events.append(event)
        book[chapter].append(paragraphs)

    return book